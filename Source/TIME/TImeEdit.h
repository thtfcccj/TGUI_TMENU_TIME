/*****************************************************************************
                         TGUI上的输入法模块首行编辑框模块
注:暂不支持自带字库全角对齐LCD显示屏的显示
*****************************************************************************/
#ifndef __TIME_EDIT_H
#define __TIME_EDIT_H

/*****************************************************************************
                              说明
*****************************************************************************/
//首行的编辑框为行编辑器，如下图所示(边框仅示意编辑范围)
//┏━━━━━━━━┓
//┃中国│          ┃
//┗━━━━━━━━┛
//允许编辑超过编辑框大小的字符,如下图(编辑中华人民共和国万岁)
//┏━━━━━━━━┓
//┃中华人民共和国│┃
//┗━━━━━━━━┛
//当超过编辑框大小时，可左右移动光标查看编辑框内的字符,右移一格后
//┏━━━━━━━━┓
//┃华人民共和国万│┃
//┗━━━━━━━━┛
//光标左移一格后:
//┏━━━━━━━━┓
//┃华人民共和国│万┃
//┗━━━━━━━━┛
//删除光标位置字符后
//┏━━━━━━━━┓
//┃华人民共和│万岁┃
//┗━━━━━━━━┛
//光标位置增加一个字符后
//┏━━━━━━━━┓
//┃华人民共和人│万┃
//┗━━━━━━━━┛
//删除光标位置之前的所有字符后，余空空间自动显示为空(空格)
//┏━━━━━━━━┓
//┃│万岁          ┃
//┗━━━━━━━━┛

//注：支持半角和全角字符的混合操作

/*****************************************************************************
                        相关结构
*****************************************************************************/
#include "TImeBase.h" //TIme_String_t;

//用于对输入法第一行的编辑器进行管理的结构定义
struct _TImeEdit{
  char *pString;        //被修改的字符串
  TIme_String_t Size;     //字符串缓冲区允许大小
  TIme_String_t Len;     //字符串实际长度
  TIme_String_t w;       //编辑框宽度
  TIme_String_t DispStart;  //显示起始位置
  TIme_String_t Cursor; //光标位置，即当前编辑位置,>=显示起始位置
};

//注：允许上层读取结构里的所有数据，但禁止对数据直接进行写操作！

/*****************************************************************************
                        相关成员函数
*****************************************************************************/

//--------------------------初始化函数-------------------------------
//进入输入法模式时调用
void TImeEdit_Init(struct _TImeEdit *pEdit,
                  char *pString,       //被修改的字符串
                  TIme_String_t Size,  //字符串缓冲区允许大小+1
                  TIme_String_t w，    //编辑框宽度
                  TIme_String_t Cursor);//默认光标位置,-1时为最后

//--------------------得到相对光标位置函数---------------------------
//即在当前显示起始开始的光标位置，用于上层焦点区反显
TIme_String_t TImeEdit_GetCursor(const struct _TImeEdit *pEdit);

//-----------------------得到当前光标位置 -------------------------------
#define TImeEdit_GetCurCursor(edit)  ((edit)->Cursor)

//-----------------------得到当前字符长度-------------------------------
#define TImeEdit_GetCurLen(edit)  ((edit)->Len)

//-----------------------得到当前字符-------------------------------
#define TImeEdit_pGetCurStr(edit)  ((edit)->pString)

//---------------------------光标左移函数---------------------------
//焦点在编辑框内时调用
//返回左移个数
unsigned char TImeEdit_CursorLeft(struct _TImeEdit *pEdit);
        
//---------------------------光标右移函数---------------------------
//焦点在编辑框内时调用
//返回右移个数
unsigned char TImeEdit_CursorRight(struct _TImeEdit *pEdit);

//------------------------删除一个字符函数---------------------------
//删除光标左侧的一个字符,焦点在编辑框内时调用
//返回删除个数
unsigned char TImeEdit_Clr(struct _TImeEdit *pEdit);

//------------------判断允许增加字符个数函数---------------------------
//在当前光标位置增加一个字或字符,焦点在编辑框内时调用
//返回可增加字符个数
unsigned char TImeEdit_EnAdd(const struct _TImeEdit *pEdit);

//-------------------光标位置增加一个字符函数---------------------------
//焦点在编辑框内时调用
void TImeEdit_Add(struct _TImeEdit *pEdit,
                  unsigned short String);//增加的全字或半字

//-------------------------增充字符函数-----------------------------
//填充从显示起始位置到宽度范围内的字符，不足的补充空格
void TImeEdit_FullBuf(const struct _TImeEdit *pEdit,
                      char *pBuf);    //被填充的缓冲区

#endif //#define __TIME_EDIT_H
